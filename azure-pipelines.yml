pool:
  name: Azure Pipelines

steps:
- task: gittools.gitversion.gitversion-task.GitVersion@5
  displayName: GitVersion
  inputs:
    configFilePath: GitVersion.yml

- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: '$(Parameters.RestoreBuildProjects)'

- powershell: |
   if ("$(Build.SourceBranch)" -match "refs\/tags\/(.+)") {
      $version = $Matches[1]
   }
   else {
      $version = "$(GitVersion.MajorMinorPatch)-dev.$(GitVersion.CommitsSinceVersionSource)"
   }
   
   Write-Host $version
   Write-Host "##vso[build.updatebuildnumber]$version"
   
  displayName: 'Set build version'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects: '$(Parameters.RestoreBuildProjects)'
    arguments: '--configuration $(BuildConfiguration) /p:Version=$(Build.BuildNumber)'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: test
    projects: '$(Parameters.RestoreBuildProjects)'

- task: DotNetCoreCLI@2
  displayName: 'dotnet pack'
  inputs:
    command: pack
    packagesToPack: FluentResponsePipeline/FluentResponsePipeline.csproj
    nobuild: true
    versioningScheme: byEnvVar
    versionEnvVar: Build.BuildNumber

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed()

